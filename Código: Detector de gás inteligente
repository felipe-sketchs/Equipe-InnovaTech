// Definições dos pinos utilizados
#define LED 7               // LED vermelho de alerta
#define BUZZER 9            // Buzzer de alarme
#define EXAUSTOR 8          // Ventilador/Exaustor
#define BUTTON 2            // Botão para desligar alarme
#define MQ6_PIN A0          // Entrada analógica do sensor MQ-6
#define GREEN_LED 6         // LED verde indicando ambiente normal
 
// Parâmetros do sensor
#define RL 10000.0          // Resistor de carga de 10k ohms
#define Ro 9785.0           // Valor calibrado de Ro (deve ser ajustado para cada sensor)
 
// Limiares de operação (em ppm)
#define EXAUSTOR_THRESHOLD 700     // Liga exaustor acima de 700 ppm
#define ALARME_THRESHOLD 1000      // Liga alarme acima de 1000 ppm
 
// Temporizações
#define BLINK_INTERVAL 500         // Intervalo para piscar LED e buzzer
#define SERIAL_INTERVAL 200        // Intervalo para atualizar o monitor serial
 
// Variável de controle de interrupção
volatile byte FLAG = 0;
 
// Variável para temporização serial
unsigned long lastSerialMillis = 0;
 
void setup() {
  pinMode(LED, OUTPUT);           // Configura LED vermelho como saída
  pinMode(BUZZER, OUTPUT);        // Configura buzzer como saída
  pinMode(EXAUSTOR, OUTPUT);      // Configura exaustor como saída
  pinMode(GREEN_LED, OUTPUT);     // LED verde como saída
  pinMode(MQ6_PIN, INPUT);        // Entrada do sensor MQ-6
  pinMode(BUTTON, INPUT_PULLUP);  // Botão com pull-up interno
 
  attachInterrupt(digitalPinToInterrupt(BUTTON), BT_STATE_ISR, FALLING); // Interrupção para o botão
  Serial.begin(9600);             // Inicializa comunicação serial
}
 
void loop() {
  int sensorValue = analogRead(MQ6_PIN);    // Leitura bruta do sensor
  float ppm = calcularPPM(sensorValue);     // Conversão para ppm
 
  // Controle do exaustor
  if (ppm > EXAUSTOR_THRESHOLD) {
    ligarExaustor();
    digitalWrite(GREEN_LED, LOW);          // Desliga LED verde se houver gás
  } else {
    desligarExaustor();
    digitalWrite(GREEN_LED, HIGH);         // Liga LED verde se ambiente está limpo
  }
 
  // Controle do alarme
  if (ppm > ALARME_THRESHOLD) {
    FLAG = 0;                               // Garante que o alarme irá iniciar
    blinkComSensor(LED, BUZZER, BLINK_INTERVAL); // Inicia o alarme visual/sonoro
  }
 
  // Impressão dos dados no monitor serial em tempo real
  if (millis() - lastSerialMillis >= SERIAL_INTERVAL) {
    Serial.print("Tempo: ");
    Serial.print(millis() / 1000);
    Serial.print(" s | Gás: ");
    Serial.print(ppm);
    Serial.println(" ppm");
    lastSerialMillis = millis();
  }
}
 
// Função de interrupção chamada ao pressionar o botão
void BT_STATE_ISR() {
  FLAG = 1;   // Sinaliza para parar o alarme
}
 
// Liga o exaustor
void ligarExaustor() {
  digitalWrite(EXAUSTOR, HIGH);
}
 
// Desliga o exaustor
void desligarExaustor() {
  digitalWrite(EXAUSTOR, LOW);
}
 
// Função para piscar LED e buzzer enquanto FLAG for 0
void blinkComSensor(int led, int buzzer, int intervalo) {
  unsigned long previousMillis = 0;
  unsigned long serialMillis = 0;
  bool estado = false;
 
  while (FLAG == 0) {
    unsigned long currentMillis = millis();
 
    // Alterna o estado do LED e do buzzer a cada intervalo
    if (currentMillis - previousMillis >= intervalo) {
      previousMillis = currentMillis;
      estado = !estado;
      digitalWrite(led, estado);
      digitalWrite(buzzer, estado);
    }
 
    // Atualiza a leitura do sensor e imprime no monitor serial
    if (currentMillis - serialMillis >= SERIAL_INTERVAL) {
      int leitura = analogRead(MQ6_PIN);
      float ppm = calcularPPM(leitura);
      Serial.print("Tempo: ");
      Serial.print(currentMillis / 1000);
      Serial.print(" s | Gás: ");
      Serial.print(ppm);
      Serial.println(" ppm");
      serialMillis = currentMillis;
    }
  }
 
  // Após pressionar o botão, desliga o LED e buzzer
  digitalWrite(led, LOW);
  digitalWrite(buzzer, LOW);
}
 
// Função que converte o valor do sensor para ppm de gás
float calcularPPM(int sensorValue) {
  float voltage = sensorValue * (5.0 / 1023.0);                  // Converte leitura ADC para tensão
  float RS = (5.0 - voltage) * RL / voltage;                     // Calcula resistência do sensor
  float ratio = RS / Ro;                                         // Calcula razão RS/Ro
  float ppm = pow(10, ((log10(ratio) - 1.45) / -0.47));          // Fórmula baseada no gráfico do datasheet do MQ-6
  return ppm;
}
