/*
 * Detector de Gás Inteligente
 * Projeto: Equipe InnovaTech
 * Autor: Equipe InnovTech
 * Descrição: Monitora concentração de gás e aciona exaustor/alarme via Arduino.
 */

// =================== DEFINIÇÕES DE PINOS ===================
const int LED = 7;               // LED vermelho de alerta
const int BUZZER = 9;            // Buzzer de alarme
const int EXAUSTOR = 8;          // Ventilador/Exaustor
const int BUTTON = 2;            // Botão para desligar alarme
const int MQ6_PIN = A0;          // Entrada analógica do sensor MQ-6
const int GREEN_LED = 6;         // LED verde indicando ambiente normal

// =================== PARÂMETROS DO SENSOR ==================
const float RL = 10000.0;        // Resistor de carga 10kΩ
const float Ro = 9785.0;         // Valor calibrado de Ro

// =================== LIMIARES E TEMPORIZAÇÕES ==============
const int EXAUSTOR_THRESHOLD = 700;      // Liga exaustor acima de 700 ppm
const int ALARME_THRESHOLD = 1000;       // Liga alarme acima de 1000 ppm
const unsigned long BLINK_INTERVAL = 500; // Intervalo para piscar LED/buzzer (ms)
const unsigned long SERIAL_INTERVAL = 200; // Intervalo atualização serial (ms)

// =================== VARIÁVEIS GLOBAIS =====================
volatile byte flag = 0;
unsigned long lastSerialMillis = 0;

// =================== SETUP ================================
void setup() {
  pinMode(LED, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(EXAUSTOR, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(MQ6_PIN, INPUT);
  pinMode(BUTTON, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(BUTTON), btStateISR, FALLING);
  Serial.begin(9600);
}

// =================== LOOP PRINCIPAL ========================
void loop() {
  int sensorValue = analogRead(MQ6_PIN);
  float ppm = calcularPPM(sensorValue);

  // Controle do exaustor
  if (ppm > EXAUSTOR_THRESHOLD) {
    ligarExaustor();
    digitalWrite(GREEN_LED, LOW);
  } else {
    desligarExaustor();
    digitalWrite(GREEN_LED, HIGH);
  }

  // Controle do alarme
  if (ppm > ALARME_THRESHOLD) {
    flag = 0;
    blinkComSensor(LED, BUZZER, BLINK_INTERVAL);
  }

  // Impressão dos dados no monitor serial
  if (millis() - lastSerialMillis >= SERIAL_INTERVAL) {
    Serial.print("Tempo: ");
    Serial.print(millis() / 1000);
    Serial.print(" s | Gás: ");
    Serial.print(ppm);
    Serial.println(" ppm");
    lastSerialMillis = millis();
  }
}

// =================== FUNÇÕES AUXILIARES ====================

void btStateISR() {
  flag = 1;
}

void ligarExaustor() {
  digitalWrite(EXAUSTOR, HIGH);
}

void desligarExaustor() {
  digitalWrite(EXAUSTOR, LOW);
}

void blinkComSensor(int led, int buzzer, int intervalo) {
  unsigned long previousMillis = 0;
  unsigned long serialMillis = 0;
  bool estado = false;

  while (flag == 0) {
    unsigned long currentMillis = millis();

    // Alterna LED/Buzzer
    if (currentMillis - previousMillis >= intervalo) {
      previousMillis = currentMillis;
      estado = !estado;
      digitalWrite(led, estado);
      digitalWrite(buzzer, estado);
    }

    // Atualiza leitura no serial
    if (currentMillis - serialMillis >= SERIAL_INTERVAL) {
      int leitura = analogRead(MQ6_PIN);
      float ppm = calcularPPM(leitura);
      Serial.print("Tempo: ");
      Serial.print(currentMillis / 1000);
      Serial.print(" s | Gás: ");
      Serial.print(ppm);
      Serial.println(" ppm");
      serialMillis = currentMillis;
    }
  }

  // Desliga após botão
  digitalWrite(led, LOW);
  digitalWrite(buzzer, LOW);
}

float calcularPPM(int sensorValue) {
  float voltage = sensorValue * (5.0 / 1023.0);
  float RS = (5.0 - voltage) * RL / voltage;
  float ratio = RS / Ro;
  float ppm = pow(10, ((log10(ratio) - 1.45) / -0.47));
  return ppm;
}
